" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

source $VIMRUNTIME/defaults.vim

" set the leader key.
let mapleader = ","

syntax on
set smartindent
set nowrap
set incsearch
set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey "color vertical line after 80 character
set smarttab
set autoindent
set clipboard=unnamed
set nocompatible
set smartcase
set autochdir
set wildmode=longest,list,full


" turn on line numbering
set number
set relativenumber
set encoding=UTF-8

set splitright
set splitbelow

let g:comfortable_motion_friction = 90.0
let g:comfortable_motion_air_drag = 4.0

" map KEYSTROKES
" map jk to escape
:imap jk <Esc>

" Fast saving of a buffer (<leader>w):
nmap <leader>w :w!<cr>

" Map <Space> to / (search) and <Ctrl>+<Space> to ? (backwards search)
map <space> / 
map <C-space> ?

" indent/unindent with tab/shift-tab
nmap <Tab> >>
nmap <S-tab> <<
imap <S-Tab> <Esc><<i
vmap <Tab> >gv
vmap <S-Tab> <gv

"split navigations
"nnoremap <C-J> <C-W><C-J> "ctrl + j move to the split below
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>

nnoremap <leader>j <C-W><C-J> "ctrl + j move to the split below
nnoremap <leader>k <C-W><C-K>
nnoremap <leader>l <C-W><C-L>
nnoremap <leader>h <C-W><C-H>

" Press CTRL+R to run python script into separate term window 
"nnoremap <C-R> :sp <CR> :term python % <CR>
"nnoremap <C-W> :bd!<CR>

" Tab management
nnoremap tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" code folding
set foldmethod=indent
set foldlevel=99

" Start NERDTree and leave the cursor in it.
autocmd VimEnter * NERDTree

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif


" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Browse directory hierarchies
Plug 'preservim/nerdtree'

" Python
Plug 'vim-scripts/indentpython.vim'

" Adds icons to your plugins
"Plug 'ryanoasis/vim-devicons'

" Using the jedi autocompletion
Plug 'davidhalter/jedi-vim'

" Powerline is a statusline
Plug 'powerline/powerline'

" Flake8 plugin for vim
Plug 'nvie/vim-flake8'

" An alternative indentation script for python
Plug 'vim-scripts/indentpython.vim'

" vim-plug
Plug 'raimon49/requirements.txt.vim'

" Fuzzy file, buffer, mru, tag, etc.
Plug 'kien/ctrlp.vim'

" For fullscreen
Plug 'lambdalisue/vim-fullscreen'

"Plug 'drewtempelmeyer/palenight.vim'
"Plug 'herrbischoff/cobalt2.vim'
"Plug 'morhetz/gruvbox'
"Plug 'tomasr/molokai'
"Plug 'sonph/onehalf', { 'rtp': 'vim' }

Plug 'sainnhe/sonokai'
Plug 'sheerun/vim-polyglot'

"Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

" Initialize plugin system
call plug#end()

" file browser
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

"set t_Co=256
"set background=dark
"colorscheme onehalf

" Important!!
if has('termguicolors')
  set termguicolors
endif
" The configuration options should be placed before `colorscheme sonokai`.
let g:sonokai_style = 'andromeda'
let g:sonokai_enable_italic = 1
let g:sonokai_disable_italic_comment = 1
colorscheme sonokai

"set lines=100 columns=1000


" mouse
set mouse=a
let g:is_mouse_enabled = 1
noremap <silent> <Leader>m :call ToggleMouse()<CR>
function ToggleMouse()
    if g:is_mouse_enabled == 1
        echo "Mouse OFF"
        set mouse=
        let g:is_mouse_enabled = 0
    else
        echo "Mouse ON"
        set mouse=a
        let g:is_mouse_enabled = 1
    endif
endfunction


let &pythonthreedll = "C:\Users\cduvi\anaconda3\python38.dll" 

